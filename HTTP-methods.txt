
---------------- HTTP ----------------
HTTP (англ. HyperText Transfer Protocol — «протокол передачи гипертекста») — сетевой протокол прикладного уровня, который изначально предназначался для получения с серверов гипертекстовых документов в формате HTML, а с течением времени стал универсальным средством взаимодействия между узлами как Всемирной паутины, так и изолированных веб-инфраструктур.

Основой HTTP является технология «клиент-сервер», то есть предполагается существование:
- Потребителей (клиентов), которые инициируют соединение и посылают запрос;
- Поставщиков (серверов), которые ожидают соединения для получения запроса, производят необходимые действия и возвращают обратно сообщение с результатом.
HTTP — протокол прикладного уровня; аналогичными ему являются FTP и SMTP. Обмен сообщениями идёт по обыкновенной схеме «запрос-ответ». 
Для идентификации ресурсов HTTP использует глобальные URI.

HTTP представляет собой список правил, по которым компьютеры обмениваются данными в интернете. 
HTTP умеет передавать все возможные форматы файлов — например, видео, аудио, текст. Но при этом состоит только из текста.
Например, когда вы вписываете в строке браузера www.onliner.by, он составляет запрос и отправляет его на сервер, чтобы получить HTML-страницу сайта. 
Когда сервер обрабатывает запрос, то он отправляет ответ, в котором написано, что всё «ок» и вот вам сайт.


------------------ МЕТОДЫ ЗАПРОСОВ HTTP -------------------
Управление данными происходит с помощью методов HTTP. 
Метод — это действие, которое клиент ждёт от сервера. Например, отправить ему HTML-страницу сайта или скачать документ.
- GET — получить данные;
- POST — добавить данные;
- PUT — изменить данные;
- DELETE — удалить данные.
Использование этих методов позволяет реализовать типичный CRUD (Create/Read/Update/Delete) для любой информации. Но это лишь соглашение, часто используются только 2 метода: 
GET для получения (иногда HEAD) и POST для всего остального.
Таким образом, три наиболее часто используемых метода запроса: GET, POST и HEAD.

--------- Метод GET: получение документа ---------	
Это основной метод, используемый для извлечения html, изображений, JavaScript, CSS и т.д. 
С использованием этого метода запрошено большинство данных, загружаемых в ваш браузер.
Метод GET запрашивает определенный ресурс. Дополнительные сведения (параметры) могут быть переданы через строку запроса (Query String) в составе URL. 
Длина запроса ограничена (макс. длина URL - 2048). Запрос доступен для кеширования данных.

--------- Метод POST: отправка данных на сервер ---------
Даже если вы можете отправлять данные на сервер с помощью GET и строки запроса, во многих случаях POST будет предпочтительнее. 
Отправка больших объёмов данных с помощью GET нецелесообразна и имеет ограничения.
Запросы POST чаще всего отправляются веб-формами.
Метод позволяет отправить данные на сервер. Поддерживает отправку различных типов файлов, среди которых текст, PDF-документы и другие типы данных в двоичном виде. 
Обычно метод POST используется при отправке информации (например, заполненной формы логина) и загрузке данных на веб-сайт, таких как изображения и документы. 
В отличие от метода GET запросы POST не могут быть кэшированы.

--------- Метод HEAD: получение информации заголовка ---------
Обычно сервер в ответ на запрос возвращает заголовок и тело, в котором содержится запрашиваемый ресурс. 
Метод HEAD при использовании его в запросе позволит получить только заголовки, которые сервер бы вернул при получении GET-запроса к тому же ресурсу. 
Запрос с использованием метода HEAD обычно производится для того, чтобы узнать размер запрашиваемого ресурса перед его загрузкой.
Таким образом, HEAD идентичен GET, за исключением того, что сервер не возвращает содержимое HTTP-ответа. 
Когда вы отправляете запрос HEAD, это означает, что вас интересуют только код ответа и HTTP headers, а не сам документ.
С помощью метода HEAD браузер может проверить, был ли документ изменён для целей caching. Он также может проверить, существует ли документ вообще.
Например, если у вас много ссылок на веб-сайте, вы можете периодически отправлять HEAD-запросы каждой из них, чтобы проверить наличие неработающих ссылок. Это будет намного быстрее, чем при использовании GET.

----- GET для безопасных действий, POST для опасных -----
Говоря совсем просто, GET-запросы лучше не использовать с приватной информацией. Вот почему:
- Они кэшируются. Это значит, что логин и пароль, переданные через GET-запрос, могут остаться в интернете навсегда, например, в веб-архиве или кэше Гугла.
- Остаются в истории браузера. Чтобы узнать, какие данные отправлялись, достаточно нажать Ctrl+H.
- Сохраняются в закладках и пересылаются. Можно не обратить внимания и опубликовать в соцсетях или отправить ссылку с приватной информацией в GET-запросе.
- Сохраняются в логах сервера. Например, нельзя отправлять данные банковских карт через GET-запрос, так как это создаёт риски для пользователей.
Таким образом, любые важные данные — логины, пароли, данные карты, персональные данные — лучше передавать с помощью метода POST. 
Также метод POST поддерживает тип кодирования данных multipart/form-data, что позволяет передавать файлы.



Помимо упомянутых выше трёх наиболее популярных методов, существуют также другие методы HTTP:

--------- Метод PUT ---------
Метод PUT в HTTP используется, чтобы ПОЛНОСТЬЮ заменить все текущие данные целевого ресурса (например, файл или запись в базе данных) на те данные, которые были отправлены в запросе.
Если вы используете метод PUT для какого-либо ресурса, то вы переписываете ВСЮ существующую информацию на новую.

--------- Метод PATCH ---------
Метод PATCH в HTTP используется для внесения ЧАСТИЧНЫХ изменений в указанный ресурс по указанному расположению.
Вместо того чтобы заменять весь ресурс новыми данными, как это делает метод PUT, метод PATCH позволяет
отправлять только те части ресурса, которые требуют изменения.

--------- Метод DELETE ---------
Позволяет удалить существующие ресурсы на сервере. 
Если использование данного метода настроено некорректно, то это может привести к атаке типа «Отказ в обслуживании» (Denial of Service, DoS) из-за удаления критически важных файлов сервера.

--------- Метод OPTIONS ---------
Позволяет запросить информацию о сервере, в том числе информацию о допускаемых к использованию на сервере HTTP-методов.
Когда клиент отправляет запрос методом OPTIONS, сервер отвечает, предоставляя информацию о том, 
какие методы запросов, заголовки и другие параметры могут быть использованы для взаимодействия с этим ресурсом.

--------- Метод TRACE ---------
При отправке запроса методом TRACE сервер принимает этот запрос, а затем возвращает его обратно клиенту в виде ответа. 
Это позволяет клиенту увидеть, через какие промежуточные серверы и прокси-серверы прошел запрос на пути к целевому ресурсу.

--------- Метод CONNECT ---------
Метод CONNECT устанавливает "туннель" между клиентом и сервером. 
Это часто используется для установления защищенных соединений, например, при работе через прокси-сервер.
Такой туннель позволяет клиенту и серверу обмениваться данными в безопасной среде, обеспечивая конфиденциальность и безопасность информации.



--------- РАЗЛИЧИЯ между POST и PUT ---------
Разница между PUT и POST состоит в том, что PUT является идемпотентным: повторное его применение даёт тот же результат, что и при первом применении (то есть у метода нет побочных эффектов ["side effect"]), 
тогда как повторный вызов одного и того же метода POST может иметь такие эффекты, как например, оформление одного и того же заказа несколько раз.

Случай 1:
Допустим у вас есть WebAPI которое позволяет добавлять-создавать пользователей и их комментарии.
Когда будете добавлять нового пользователя можно использовать PUT запрос. Если пользователь уже есть в базе, то запрос будет возвращать Conflict/BadRequest. Иначе пользователь будет добавляться. 
То есть у PUT многократное [случайное/ошибочное] выполнение одного и того же запроса не вызывает "side effect".

Случай 2:
Добавление комментариев, лучше использовать POST запрос, т.к. многократное выполнение запроса будет создавать новые комментарии всегда.

