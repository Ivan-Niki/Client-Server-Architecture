
---------- Что такое URL ----------

URL обозначает Uniform Resource Locator. URL это лишь адрес, который выдан уникальному ресурсу в интернете. В теории, каждый корректный URL ведёт на уникальный ресурс. Такими ресурсами могут быть HTML-страница, CSS-файл, изображение и т.д. На практике, существуют некоторые исключения, когда, например, URL ведёт на ресурс, который больше не существует или который был перемещён. Поскольку ресурс, доступный по URL, а также сам URL обрабатываются веб-сервером, его владелец должен внимательно следить за размещаемыми ресурсами и связанными с ними URL.

URL (или URL адрес) – это форма уникального адреса конкретного веб-ресурса в сети Интернет. 
Он может ссылаться на веб-сайт, какой-то индивидуальный документ или изображение. 
Пользователю Интернета нужно вставить этот код в поле поиска, чтобы найти нужный сайт, документ, папку или изображение. 
На простом языке это означает следующее: благодаря URL адресу пользователь узнает информацию о том, где находятся нужные ему данные.

URL адрес – это аббревиатура, обозначающая термин Universal Resource Locator (всеобщий указатель ресурса). 
Он содержит ссылку на сервер, который является хранилищем искомого ресурса.

URL – это адрес документа или файла. Аббревиатура URL составлена из начальных букв исходного сочетания 
Uniform Resource Locator, что в переводе с английского языка означает понятие Единый указатель ресурсов.
Другими словами, он определяет местонахождение ресурса либо документа в сети, его сетевой локатор, ссылка на него.



----------- Структура URL-адреса -----------
Рассмотрим для примера следующий URL:

   https://blog.example.com:80/catalog/category/knifes?key1=value1&key2=value2#anchor
   

   https:// blog.example.com :80 /catalog/category/knifes ?key1=value1&key2=value2  #anchor
  |       |                 |   |                        |                         |       |           
  |  1    |      2          | 3 |            4           |             5           |   6   |


где

-> 1) http:// — протокол

-> 2) Хост: blog — поддомен (субдомен, домен третьего уровня)
            example — домен (домен второго уровня)
            com — доменная зона (домен первого уровня)

-> 3) :80 — порт. Для http — 80, для https — 443

-> 4) /catalog/category/knifes — Path (путь) - ЧПУ-адрес (человеко-понятный URL)

-> 5) ?key1=value1&key2=value2 — Query String (GET параметры запроса)

-> 6) #anchor — якорь



1) Scheme (протокол). Это поле, которое используется для указания используемого протокола. 
Помечается как двоеточие и два слеша (://). 
Например: https://

2) Host (доменное имя). Позволяет указать местоположение ресурса. В нем может размещаться доменное имя или IP-адрес.
Например: blog.example.com

3) Port (порт). Port, как можно догадаться, позволяет указать номер порта, по которому следует обратиться к серверу. Оно начинается с двоеточия (:), за которым следует номер порта. 
При отсутствии данного элемента номер порта будет выбран по умолчанию в соответствии с указанным значением Scheme (например, для http:// это будет порт 80).
Например:  :80

4) Path (путь). Он указывает на ресурс, к которому производится обращение. 
Если данное поле не указано, то сервер в большинстве случаев вернет указатель по умолчанию (например index.html).
Например:  /catalog/category/knifes

5) Query String (параметры запроса). Поле Query String начинается со знака вопроса (?), за которым следует пара «параметр-значение»,
между которыми расположен символ равно (=). 
В поле Query String могут быть переданы несколько параметров с помощью символа амперсанд (&) в качестве разделителя.
Например: key1=value1&key2=value2

6) Якоря (анкоры)
Якоря придуманы в HTML, чтобы давать ссылки не просто на HTML-страницу, а на определенное место на странице. Позже якоря стали активно использоваться для передачи параметров в JS.
Якорь используется для формирования ссылки на конкретное место на веб-странице, что очень удобно при наличии объемных текстов на странице. 
Якорь обозначается символом "#" за которым следует идентификатор элемента на странице, например, "#section-2".
В нашем примере выше якорь - #anchor


URL с якорем
https://domain.ru/url#someAnchor

HTML-элемент, на который ведет якорь
<h2 name="someAnchor">Заголовок с якорем</h2>

Не все компоненты необходимы для доступа к ресурсу. Обязательно следует указать только поля Scheme и Host.




=========== Основы: анатомия URL ===========

Вот несколько примеров URL:

https://developer.mozilla.org
https://developer.mozilla.org/ru/docs/Learn/
https://developer.mozilla.org/ru/search?q=URL

Каждый из этих URLs могут быть напечатаны в адресной строке браузера, чтобы заставить его загрузить связанную страницу (ресурс).

URL состоит из различных частей, некоторые из которых являются обязательными, а некоторые - факультативными. Рассмотрим наиболее важные части на примере:

http://www.example.com:80/path/to/myfile.html?key1=value1&key2=value2#SomewhereInTheDocument


1) http:// -> это протокол. Он отображает, какой протокол браузер должен использовать. 
Обычно это HTTP-протокол или его безопасная версия - HTTPS. 
Интернет требует эти 2 протокола, но браузеры часто могут использовать и другие протоколы, 
например mailto: (чтобы открыть почтовый клиент) или ftp: для запуска передачи файлов, 
так что не стоит удивляться, если вы вдруг увидите другие протоколы.

2) www.example.com -> это доменное имя. Оно означает, какой веб-сервер должен быть запрошен. 
В качестве альтернативы может быть использован и IP-адрес, но это делается редко, поскольку запоминать IP сложнее, и это не популярно в интернете.

3) :80 -> это порт. Он отображает технический параметр, используемый для доступа к ресурсам на веб-сервере. Обычно подразумевается, что веб-сервер использует стандартные порты HTTP-протокола (80 для HTTP и 443 для HTTPS) для доступа к своим ресурсам. 
В любом случае, порт - это факультативная составная часть URL.

4) /path/to/myfile.html -> это адрес ресурса на веб-сервере. 
В прошлом, адрес отображал местоположение реального файла в реальной директории на веб-сервере. 
В наши дни это чаще всего абстракция, позволяющая обрабатывать адреса и отображать тот или иной контент из баз данных.

5) ?key1=value1&key2=value2 -> это дополнительные параметры, которые браузер сообщает веб-серверу. 
Эти параметры - список пар "ключ-значение", которые разделены символом &. 
Веб-сервер может использовать эти параметры для исполнения дополнительных команд перед тем как отдать ресурс. Каждый веб-сервер имеет свои собственные правила обработки этих параметров и узнать их можно, только спросив владельца сервера.

