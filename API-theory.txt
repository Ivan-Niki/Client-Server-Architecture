
---------------- ЧТО ТАКОЕ API ----------------

API (англ. Application Programming Interface — программный интерфейс приложения) — это набор способов и правил, по которым различные программы общаются между собой и обмениваются данными.
Все эти взаимодействия происходят с помощью функций, классов, методов, структур, а иногда констант одной программы, к которой обращаются другие. Это основной принцип работы API.
Использование API поможет гораздо меньше кодить, а вместо этого брать уже существующие данные, функции и приложения и на их основе создавать новые продукты. Скорость и экономия времени ценятся в IT.

API — это набор правил и протоколов, который позволяет различным программным приложениям взаимодействовать друг с другом. 
Он определяет методы и форматы данных, которые приложения могут использовать для запроса и обмена информацией.
API обеспечивают интеграцию различных программных систем, позволяя им работать вместе, обмениваться данными и получать доступ к функциям друг друга. 
Можно рассматривать API как посредник между двумя приложениями, которым необходимо обмениваться информацией.

----- Зачем нам API? -----
API становятся все более важными в современной разработке программного обеспечения. 
Они позволяют разработчикам сосредоточиться на создании новых функций, а не изобретать велосипед заново.
Например, разработчик мобильного приложения может использовать API для доступа к метеорологической службе, а не создавать собственные функции погоды с нуля. 
Вот еще несколько причин, почему API стали необходимы сегодня:
--> Взаимодействие.
API-интерфейсы облегчают взаимодействие между различными программными системами. 
Они позволяют приложениям и сервисам, разработанным разными организациями или командами, работать вместе,
обмениваться данными и предоставлять интегрированные решения.

--> Модульная разработка
API обеспечивают модульную разработку, разбивая сложные системы на более мелкие, управляемые компоненты, 
что упрощает разработку, тестирование и обслуживание программного обеспечения, поскольку разработчики могут
сосредоточиться на создании и обновлении конкретных функций.

--> Кроссплатформенная интеграция
API обеспечивают межплатформенную интеграцию, позволяя приложениям работать на разных устройствах и в разных средах. 
Например, мобильное приложение может использовать API для связи с сервером, и тот же сервер может передавать
данные веб-приложению или другим клиентским устройствам.

--> Доступ к данным и совместное использование
API определяют структурированный способ обмена данными между приложениями. 
Данные обычно форматируются на определенном языке, например JSON или XML. 
Эта стандартизированная структура позволяет как запрашивающему приложению, так и предоставляющей системе легко интерпретировать и обрабатывать данные.



---------- Где используется API ----------
API позволяет интегрировать в программу функции, которые уже реализованы в другом приложении. 
Например, добавить на свой сайт «Яндекс.Карты» или подключить сервис email-рассылок к собственной СRМ-системе.
То есть вам не нужно разрабатывать собственное ПО для решения типовой задачи, можно использовать готовый инструмент. 
Это позволит быстро внедрить функцию в проект и сэкономить деньги.
Допустим, вы покупаете билет в кино с помощью банковской карты. 
Во время покупки терминал обращается к API банка, который выпустил вашу карту, и отправляет запрос на оплату. 
А если вы заказываете такси через приложение, оно обращается к платёжной системе тоже через API.

---------- Как работает API ----------
По сути, интерфейс API можно назвать посредником двух приложений. В нем протекают процессы, позволяющие другим
сервисам осуществлять обмен данными и выполнять команды, которые связаны с обеими приложениями. 
Внутреннее содержимое программ при этом оказывается скрытым.

Опишем процесс работы с API на примере:
-> 1. Разработчик пишет собственную программу, операционную систему или функцию.
-> 2. Для этого он разрабатывает API — особенный набор правил, на основе которых другие программисты смогут пользоваться его разработкой для собственных задач.
-> 3. Другой программист получает данный API. Доступ можно получить по запросу или на публичной платформе.
-> 4. Он вызывает API внутри собственного сервиса и использует его возможности.

Знать, как работает функция, которую вызывает программист, необязательно. 
В ней может содержаться огромное количество информации, но с интерфейсом, который предоставляет API, получить к ней доступ можно будет с помощью одной команды.



----------- Примеры API -----------

--> Картографические сервисы. 
Компании размещают на сайте или в приложении карту от «Яндекс» или Google. 
Сервис позволяет отметить филиалы, добавить изображения или комментарии к меткам, указать адрес для доставки.

--> Агрегаторы. 
Сайты, которые собирают информацию из нескольких источников, чаще всего используют для этого API. 
Например, сервисы авиабилетов, агрегаторы новостей, площадки для продажи товаров, бронирования отелей.

--> Сервисы оплаты. 
Когда покупатель использует карту, терминал оплаты обращается к программному интерфейсу банка. 
Если вы оплачиваете такси, доставку еды или товары в приложении, оно также подключается к платежной системе через API.

--> Авторизация через соцсети. 
Формы для быстрой регистрации и авторизации через социальные сети встречаются на многих ресурсах. 
Пользователю просто и удобно создать учетную запись на сайте в два клика, а не заполнять каждый раз однотипную форму.

--> Приложения Погоды
Существуют сервисы, напрямую работающие с метеорологическими станциями. 
Такие приложения автоматически запрашивают данные о погоде в определенной локации, а API обрабатывает его и связывает со спутником. 
Благодаря этому клиент всегда имеет доступ к достоверной информации.

--> Переводчики
К примеру, переводчик, встроенный в Google Chrome, а также Яндекс Переводчик дают разработчикам приложений доступ к своим API.
Это позволяет подключить их интерфейс к собственному сервису для автоматического перевода страниц.



------------ Типы API ------------
Существует несколько типов API. Некоторые из них более распространены, чем другие. 
Рассмотрим наиболее популярные типы API.

---> REST API
REST API (Representational State Transfer API) — это наиболее распространённый тип API. 
Разработчики используют его для создания веб-сервисов, которые могут обмениваться данными с другими приложениями и сервисами через интернет.
REST API основан на HTTP-протоколе и использует запросы HTTP для обмена данными между клиентом и сервером. 
Для каждого запроса клиент должен указать метод (GET, POST, PUT, DELETE), URL-адрес и параметры запроса.

---> SOAP API
SOAP API (Simple Object Access Protocol API) — это ещё один распространённый тип API. 
Разработчики используют его для обмена данными между приложениями, работающими на разных платформах, например, между .NET и Java.
SOAP API основан на XML и использует SOAP-протокол для обмена данными между клиентом и сервером. 
Каждый запрос SOAP содержит заголовок и тело сообщения, которое может содержать данные, методы и параметры запроса.

---> WebSocket API
WebSocket API — это тип API, который используется для создания постоянного соединения между клиентом и сервером. 
Он позволяет клиенту и серверу передавать данные в режиме реального времени, без необходимости постоянно отправлять запросы.
WebSocket API основан на WebSocket-протоколе и использует двустороннюю связь между клиентом и сервером. 
Это позволяет серверу отправлять данные клиенту в режиме реального времени, что делает этот тип API особенно полезным для приложений, которые требуют быстрой передачи данных. 
Например, передача видеопотока в видеохостинге или сервисе облачного гейминга.

---> GraphQL API
GraphQL API — это относительно новый тип API, который появился в 2015 году. 
Разработчики используют его для создания гибких и эффективных веб-сервисов, которые могут быстро и точно получать необходимые данные.
GraphQL API основан на запросах, которые отправляются клиентом серверу в формате GraphQL. 
Каждый запрос содержит только те данные, которые нужны клиенту, что делает этот тип API более быстрым и эффективным, чем другие.

