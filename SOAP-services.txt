-------- Что из себя представляет SOAP --------
В SOAP передача данных идет по протоколу HTTP, то есть также, как это происходит и в случает REST-запросов.
Давайте рассмотрим на примере. Если я зайду на сайт какой-нибудь биржи акций, то могу узнать курс интересующей меня акции. 
Откуда поступает эта информация? Давайте разберемся.

Я открываю на своем компьютере браузер, который является клиентом. По протоколу HTTP он обращается к серверу (назовем его HTTP-server).
На этом HTTP-сервере живёт приложение, которое отдает мне информацию, о том, что акция Facebook стоит, к примеру, 252 доллара. 
Однако, откуда само приложение, живущее на HTTP-сервере, знает стоимость акции?
А все очень просто — приложение в данном случае выступило как SOAP-client и запросило эту информацию на другом 
сервере (назовем его SOAP-server).

Взаимодействие SOAP-client и SOAP-server происходит по протоколу SOAP поверх HTTP. Что значит поверх? 
Это значит, что клиент и сервер общаются по протоколу HTTP, но по этому протоколу передаётся не просто 
стандартное сообщение HTTP, а некий конвертик с письмом, причем это письмо написано по правилам протокола SOAP.
То есть сайт, который передал мне информацию о Facebook, сам запросил SOAP-server (то есть биржу акций) по 
протоколу HTTP и вложил сообщение в конвертик SOAP.
Таким образом, информация о курсе акции пришла ко мне не напрямую с биржи, а через посредника — через SOAP-client.

---------- Стек протоколов веб-сервисов ----------
Давайте посмотрим на стек технологий, которые используются в данном случае:

Descriptions  - - - - - - -  WSDL (Web Services Description Language - язык описания веб-сервисов)
Packaging     - - - - - - -  SOAP (Simple Object Access Protocol - простой протокол доступа к объектам)
Transport     - - - - - - -  HTTP (Hyper Text Transfer Protocol - протокол передачи гипертекста)
Network       - - - - - - -  TCP/IP (Internet)

Когда мы работаем по сети, мы работаем с протоколами TCP/IP — это нижний, сетевой уровень протоколов. 
Весь интернет базируется на протоколе HTTP, который мы рассматривали в предыдущей статье. 
HTTP является просто транспортом, с помощью которого информация передается по сети.
Чтобы передать какое-либо сообщение по сети, оно должно соответствовать правилам протокола HTTP. 
А дальше в пакетик, передаваемый по протоколу HTTP, вкладывается сообщение по протоколу SOAP. 
И все это живет по правилам, описанным в файле WSDL.


-------- Как выглядит xml-документ? --------
Представьте себе, что вы хотите передать по сети некоторую записочку. 
И вы хотите, чтобы информация в ней была структурирована так, чтобы записку могла прочитать программа.
В качестве примера приведу записку, которую Анна пишет Марии: «Приходи ко мне в гости в воскресенье!». 
И заголовок: «Напоминалка» (Reminder). Здесь могла бы быть ещё подпись signature, но, как видите, подпись 
оказалась пустой, информация в теге не передана (такое тоже возможно).

Тег — это текстовая строка, завернутая в уголочки (<>).

<?xml version="1.0" encoding="UTF-8"?>
<note>
	<to>Мария</to>
	<from>Анна</from>
	<heading>Reminder</heading>
	<body>Приходи ко мне в гости в воскресенье!</body>
	<signature></signature>
</note>

То есть, когда мы передаем XML-документ, мы информацию «заворачиваем» в теги. 
Они предназначены для того, чтобы объяснять, что лежит внутри. 
Теги бывают открывающие (перед текстовым содержимым) и закрывающие (начинается с символа «/»).
В HTML такие же теги, но они применяются немного по-другому: в языке XML эти теги предназначены для того, чтобы 
объяснить приложению, которое принимает сообщение, что именно вложено внутрь.

Приложение, которое принимает записку, заранее знает, какие должны прийти данные внутри каких тегов. И знает оно это благодаря WSDL.
Что такое WSDL? В SOAP для описания своего сервиса нужно использовать строгие правила в виде файлов WSDL. 
Ниже мы разберем это подробнее, но вообще WSDL — это Web Services Description Language, ещё один язык описания веб-сервисов и доступа к ним.

------ Как устроен xml-документ? ------
Разберем приведенный ранее пример детальнее.
Первая строка документа — XML-декларация:
<?xml version="1.0" encoding="UTF-8"?> 
она указывает на версию XML (version="1.0″) и тип кодировки документа (encoding="utf-8″).

XML-декларация всегда начинается с символов <?xml и заканчивается символами ?>.
Декларация должна располагаться в самом начале файла, то есть первым символом файла должна быть угловая скобка и никаких концов строки или пробелов.

Правильно оформленный XML соответствует правилам:
- Каждый открывающий тег должен иметь соответствующий закрывающий тег.
- Теги не могут перекрывать друг друга.
- XML- документы должны иметь только один корневой элемент.
- Регистр символов (верхний/нижний) для XML существенен.

Что ещё есть в xml-документе?
Всё XML-сообщение (наша записочка) заворачивается в так называемый корневой тег. В данном случае, корневым является тег note.
Правильно оформленный XML - это такой XML, который соответствует стандартам языка и может быть разобран приложением, то есть приложение его получит, проверит синтаксис и начнет разбирать (парсить).
Важно понимать, что приложение не будет разбирать XML если он не будет правильно оформлен. 
В этом случае приложение придёт к выводу, что XML повредили или подменили по дороге.


------- Атрибуты элементов в XML -------
Теги могут содержать атрибуты, то есть мы можем вложить атрибуты в корневой тег. 
Посмотрите, информация о том, от кого записка (from) и кому (to) в приведенном ниже кусочке XML оформлена не как теги, а как атрибуты тега note.

<note to="Мария" from="Анна" heading="Reminder" body="Приходи ко мне в гости в воскресенье!">
</note>

Смысл XML в том, что теги удобно обрабатывать, и вариант, когда вы вкладываете информацию в виде текстовых узлов внутри тегов, довольно устойчив к ошибкам.
Представьте себе, что по пути потеряется буква «r» в слове from. Если она потеряется только в одном месте, то 
посмотрев на первый тег, мы поймем, как должен называться второй, или во всяком случае мы поймём, где произошла ошибка.
Разговоры о том, что какая-то буква потерялась, не очень актуальны сейчас, так как современные протоколы 
обеспечивают целостную доставку. Данный пример призван продемонстрировать, что XML-документ в первую очередь 
создаётся для того, чтобы информацию вкладывать в теги.
Атрибуты — это пары имя/значение, поставленные в соответствие одному из элементов. Они должны находиться при 
открывающем теге, но не при закрывающем.
Атрибуты всегда должны иметь значение, даже если значением является всего лишь пустая строка. 
Значения атрибутов должны заключаться в кавычки. При этом согласно синтаксису XML допускаются как двойные, так и одинарные кавычки.
Если вам придется руками формировать XML-документ, никогда не пишите в одном документе и двойные и одинарные 
кавычки, просто потому что вам лень аккуратно расставить однотипные, поскольку это может привести к ошибкам.

