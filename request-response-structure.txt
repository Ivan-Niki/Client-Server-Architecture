
------------ HTTP-сообщения: запросы и ответы ------------
Данные между клиентом и сервером в рамках работы протокола передаются с помощью HTTP-сообщений. 
Они бывают двух видов:
Запросы (HTTP Requests) — сообщения, которые отправляются клиентом на сервер, чтобы вызвать выполнение некоторых действий. Зачастую для получения доступа к определенному ресурсу. Основой запроса является HTTP-заголовок.
Ответы (HTTP Responses) — сообщения, которые сервер отправляет в ответ на клиентский запрос.
Само по себе сообщение представляет собой информацию в текстовом виде, записанную в несколько строчек.

В целом, как запросы HTTP, так и ответы имеют следующую структуру:
--> 1) Стартовая строка / строка запроса (start line / request line) — используется для описания версии используемого протокола 
и другой информации — вроде запрашиваемого ресурса или кода ответа. 
Как можно понять из названия, ее содержимое занимает ровно одну строчку.
--> 2) HTTP-заголовки (HTTP Headers) — несколько строчек текста в определенном формате, которые либо уточняют запрос, либо описывают содержимое тела сообщения.
--> 3) Пустая строка (разделитель), которая сообщает, что все метаданные для конкретного запроса или ответа были отправлены.
--> 4) Опциональное тело сообщения, которое содержит данные, связанные с запросом, либо документ (например HTML-страницу), передаваемый в  ответе.
Рассмотрим атрибуты HTTP-запроса подробнее.


------ Стартовая строка (строка запроса) -------
Стартовая строка HTTP-запроса состоит из трех элементов:

1) Метод HTTP-запроса (method, реже используется термин verb). Обычно это короткое слово на английском, которое указывает, что конкретно нужно сделать с запрашиваемым ресурсом. 
Например, метод GET сообщает серверу, что пользователь хочет получить некоторые данные, а POST — что некоторые данные должны быть помещены на сервер.
2) Цель запроса. Представлена указателем ресурса URL, который состоит из протокола, доменного имени (или IP-адреса), пути к конкретному ресурсу на сервере. 
Дополнительно может содержать указание порта, несколько параметров HTTP-запроса и еще ряд опциональных элементов.
3) Версия используемого протокола (либо HTTP/1.1, либо HTTP/2), которая определяет структуру следующих за стартовой строкой данных.

Давайте напишем пример стартовой строки HTTP запроса для получения страницы:
GET /page/test HTTP/1.1

А теперь пример запроса для отправки данных:
POST /page/test HTTP/1.1

----------- Заголовки ------------
HTTP-заголовок представляет собой строку формата «Имя-Заголовок:Значение», с двоеточием(:) в качестве разделителя. 
Название заголовка не учитывает регистр, то есть между Host и host, с точки зрения HTTP, нет никакой разницы. 
Однако в названиях заголовков принято начинать каждое новое слово с заглавной буквы. 
Структура значения зависит от конкретного заголовка. 
Несмотря на то, что заголовок вместе со значениями может быть достаточно длинным, занимает он всего одну строчку.

Давайте, для примера, рассмотрим один реальный запрос к серверу.
Запрос от браузера (в данном примере тело запроса отсутствует):

GET / HTTP/1.1
Host: webkyrs.info
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:18.0) Gecko/20100101 Firefox/18.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Cookie: wp-settings
Connection: keep-alive



---------- Примеры заголовков запроса -----------
--> Host
Используется для указания того, с какого конкретно хоста запрашивается ресурс. В качестве возможных значений могут использоваться как доменные имена, так и IP-адреса. 
На одном HTTP-сервере может быть размещено несколько различных веб-сайтов. Для обращения к какому-то конкретному требуется данный заголовок.

--> User-Agent
Заголовок используется для описания клиента, который запрашивает ресурс. Он содержит достаточно много информации о пользовательском окружении. 
Например, может указать, какой браузер используется в качестве клиента, его версию, а также операционную систему, на которой этот клиент работает.

--> Accept
Заголовок Accept предназначен для информирования сервера о типах данных, которые поддерживаются клиентом (браузером).
В этом заголовке браузер перечисляет, какие типы документов он "понимает". Перечисление идет через запятую.
Пример использования:
Accept: text/html, text/plain, image/jpeg

--> Cookie
Данный заголовок может содержать в себе одну или несколько пар «Куки-Значение» в формате cookie=value. 
Куки представляют собой небольшие фрагменты данных, которые хранятся как на стороне клиента, так и на сервере, и выступают в качестве идентификатора. 
Куки передаются вместе с запросом для поддержания доступа клиента к ресурсу. 
Помимо этого, куки могут использоваться и для других целей, таких как хранение пользовательских предпочтений на сайте и отслеживание клиентской сессии. 
Несколько кук в одном заголовке могут быть перечислены с помощью символа точка с запятой (‘ ; ‘), который  используется как разделитель.

--> Authorization
Используется в качестве еще одного метода идентификации клиента на сервере. 
После успешной идентификации сервер возвращает токен, уникальный для каждого конкретного клиента. 
В отличие от куки, данный токен хранится исключительно на стороне клиента и отправляется клиентом только по запросу сервера. 
Существует несколько типов аутентификации, конкретный метод определяется тем веб-сервером или веб-приложением, к которому клиент обращается за ресурсом.

--> Referer
Это поле позволяет клиенту указать URL ресурса, с которого был запрошен URL. Синтаксис следующий:
Referer: URL
Как следует из названия (Referer), этот HTTP header содержит ссылочный url.
Например, если я зашел на домашнюю страницу Nettuts + и нажал ссылку на статью, этот header будет отправлен в мой браузер:
Referer: https://net.tutsplus.com/



------- Тело запроса (request body) -------
Завершающая часть HTTP-запроса — это его тело. Не у каждого HTTP-метода предполагается наличие тела. 
Так, например, методам вроде GET, HEAD, DELETE, OPTIONS обычно не требуется тело. 
Некоторые виды запросов могут отправлять данные на сервер в теле запроса: самый распространенный из таких методов — POST.

