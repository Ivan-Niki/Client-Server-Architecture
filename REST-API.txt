
================== REST API ===================
REST (от англ. Representational State Transfer — «передача репрезентативного состояния» или «передача "самоописываемого" состояния») — архитектурный стиль взаимодействия компонентов распределённого приложения в сети. 
Другими словами, REST — это набор правил того, как программисту организовать написание кода серверного приложения, чтобы все системы легко обменивались данными и приложение можно было масштабировать. 
REST представляет собой согласованный набор ограничений, учитываемых при проектировании распределённой гипермедиа-системы. 
В определённых случаях (интернет-магазины, поисковые системы; прочие системы, основанные на данных) это приводит к повышению производительности и упрощению архитектуры.

REST API — это архитектурный подход, который устанавливает ограничения для API: как они должны быть устроены и какие функции поддерживать. 
Это позволяет стандартизировать работу программных интерфейсов, сделать их более удобными и производительными.
Слово REST — акроним от Representational State Transfer, что переводится на русский как «передача состояния представления», «передача репрезентативного состояния» или «передача "самоописываемого" состояния».
В отличие от, например, SOAP API, REST API — не протокол, а простой список рекомендаций, которым можно следовать или не следовать. 
Поэтому у него нет собственных методов. С другой стороны, его автор Рой Филдинг создал ещё и протокол HTTP, так что они очень хорошо сочетаются, и REST обычно используют в связке с HTTP. 
Хотя новичкам нужно помнить: REST — это не только HTTP, а HTTP — не только REST.

Технологию REST API применяют везде, где пользователю сайта или веб-приложения нужно предоставить данные с сервера. 
Например, при нажатии иконки с видео на видеохостинге REST API проводит операции и запускает ролик с сервера в браузере. 
В настоящее время это самый распространенный способ организации API. Он вытеснил ранее популярные способы SOAP и WSDL.


-------------- 6 принципов архитектуры REST API ----------------
Всего в REST есть шесть требований к проектированию API. Пять из них обязательные, одно — опциональное:

- Клиент-серверная модель (client-server model).
- Отсутствие состояния (statelessness).
- Кэширование (cacheability).
- Единообразие интерфейса (uniform interface).
- Многоуровневая система (layered system).
- Код по требованию (code on demand) — необязательно.
- Начало от нуля (Starting with the Null Style).

--------- Клиент-серверная модель ----------
Это требование отделяет друг от друга два понятия: клиент и сервер.
Клиент и сервер могут работать абсолютно независимо друг от друга. 
Разработчики используют достаточно простой способ организации REST API: клиентский код остается на его стороне, а код доступа — на сервере. 
Если клиентский код изменится, это не скажется на работе сервера, и наоборот. 
Благодаря этому REST API имеет такие преимущества, как переносимость и гибкость, а также возможность масштабирования.
-> Сервер — программа, в которой хранятся и обрабатываются ресурсы. Сервер может располагаться на одном или нескольких компьютерах; но даже в одном компьютере может быть несколько виртуальных серверов. 
-> Клиент — программа, которая запрашивает у сервера доступ к ресурсам. Для этого она использует API. 
Когда ваш браузер запрашивает у сервера какую-либо веб-страницу, он выступает в роли клиента.
Получается структура, при которой клиент направляет к серверу запрос, а в ответ получает ресурсы. 
Такое разделение позволяет создавать клиент и сервер независимо друг от друга, что ускоряет и упрощает разработку.

--------- Отсутствие записи состояния клиента (Stateless) ---------- 
Сервер не должен хранить информацию о состоянии (проведенных операций) клиента. 
Каждый запрос от клиента должен содержать только ту информацию, которая нужна для получения данных от сервера.

Отсутствие состояния означает, что каждый раз, когда вы обращаетесь к ресурсу через конечную точку, 
API предоставляет один и тот же ответ. 
Он не запоминает ваш последний запрос и не учитывает его при предоставлении нового ответа. 
Другими словами, нет ранее запомненных состояний, которые API учитывает при каждом запросе.

Второй принцип настолько важен, что даже отражён в названии архитектурного стиля — Representational State Transfer. 
Это значит, что на сервере не хранится никаких данных о прошлых взаимодействиях с клиентом — каждый запрос должен содержать всю информацию для его обработки.
Это снижает нагрузку на сервер, что особенно полезно, если к нему подключено одновременно много клиентов. 
Не нужно хранить дополнительную информацию о прошлых обращениях каждого из них. Достаточно обработать каждый запрос в отдельности.



--------- Кэшируемость (Cacheability) ---------
Ответы могут кэшироваться для повышения производительности. Если кэш браузера уже содержит информацию,
запрашиваемую в запросе, браузер может просто вернуть информацию из кэша вместо того, чтобы снова стучаться на сервер.

Иногда клиент запрашивает с сервера одни и те же данные по несколько раз — например, вы постоянно обращаетесь к какому-нибудь важному письму в сервисе для учёта деловых переписок.
Если при каждом таком запросе сервер будет с нуля собирать нужные данные и отправлять их клиенту, нагрузка на систему повысится — особенно когда таких повторов много. 
Решением проблемы в REST API стало кэширование, то есть сохранение части данных у клиента или на промежуточных серверах.
Однако тут тоже важно подойти к делу без излишнего фанатизма и не кэшировать всю информацию подряд. 
Во-первых, для этого потребовались бы слишком большие объёмы памяти. 
Во-вторых, какие-то данные (скажем, количество исходящих писем) со временем могут устаревать — зачем же держать этот неактуальный хлам в кэше? 
Именно поэтому в каждом ответе сервера на запрос есть пометка о том, можно ли его кэшировать.



--------- Единство интерфейса (Uniform Interface) --------- 
Все данные должны запрашиваться через один URL-адрес стандартными протоколами, например, HTTP. 
Это упрощает архитектуру сайта или приложения и делает взаимодействие с сервером понятнее.



--------- Многоуровневость системы (Layered System) ---------
В RESTful сервера могут располагаться на разных уровнях, при этом каждый сервер взаимодействует только с ближайшими уровнями и не связан запросами с другими.
До сих пор мы рассматривали сервер как единую сущность. Но его структура куда сложнее. 
Между ним и клиентом есть несколько промежуточных узлов, выполняющих вспомогательные функции, — прокси-серверы.
Они используются для кэширования, обеспечения безопасности, дополнительной обработки данных. 
Если основных серверов несколько, то дополнительные серверы-балансировщики могут распределять нагрузку между ними и решать, в какой из них направлять запрос.
Никто из участников цепочки не знает всего пути, который проходит запрос, — только своих «соседей» справа и слева. 
Ни клиент, ни один из прокси-серверов не знает, к кому он обращается — к основному сервису или к другому прокси.
В REST API это работает в обе стороны: никакие серверы (ни основные, ни прокси) не знают, кому отправляют ответ и уходит ли он куда-то дальше.



--------- Код по требованию (Code on Demand) ---------
Этот принцип означает, что сервер в ответ на запрос может отправить исходный код, который выполняется уже на стороне клиента. 
Благодаря этому можно передавать целые сценарии. Например, динамические элементы пользовательского интерфейса, написанные на JavaScript.
В REST API требование необязательно, потому что не всем сайтам и сервисам нужно умение работать с готовыми скриптами.



--------- Начало от нуля (Starting with the Null Style) ---------
Клиент знает только одну точку входа на сервер. 
Дальнейшие возможности по взаимодействию обеспечиваются сервером.

