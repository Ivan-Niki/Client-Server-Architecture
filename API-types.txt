
------------- Существует несколько способов работы API, например:
- SOAP API
- REST API
- Websocket API
- RPC API

1) REST - это архитектурный стиль взаимодействия компонентов приложения в сети, также это особый тип Web API. 
Архитектурный стиль - это набор ограничений и принципов проектирования свойств системы, которые необходимы для лучшего масштабирования и интеграции с другими сервисами.

2) SOAP - это протокол, по которому взаимодействуют веб-сервисы между друг другом или с клиентом.

3) Websocket API - это одна из разработок web API, которая позволяет открыть постоянное двунаправленное сетевое соединение между клиентом и сервером. 
Использует JSON для передачи данных.

Пример типов сообщений:
Subscribe (подписка на топик)
Unsubscribe (отписка на топик)
Message (получение сообщений)
Oauth.logheartbit (контроль статуса соединения)

4) RPC API - система удаленного вызова процедур. Клиент совершает функцию на сервере, и сервер отправляет обратно результат.



---------------- Что такое веб-сервисы? ---------------

Веб-сервисы (или веб-службы) — это технология, позволяющая системам обмениваться данными друг с другом через сетевое подключение. 
Обычно веб-сервисы работают поверх протокола HTTP или протокола более высокого уровня. 
Веб-сервис — просто адрес, ссылка, обращение к которому позволяет получить данные или выполнить действие.

Главное отличие веб-сервиса от других способов передачи данных: стандартизированность. 
Приняв решение использовать веб-сервисы, можно сразу переходить к структуре данных и доступным функциям. Например, в SOAP (как более строгом протоколе), уже решён вопрос уведомления об ошибках.

Самые известные способы реализации веб-сервисов:
--> XML-RPC (XML Remote Procedure Call) — протокол удаленного вызова процедур с использованием XML. Прародитель SOAP. Предельно прост в реализации.

--> SOAP (Simple Object Access Protocol) — стандартный протокол по версии W3C. Четко структурирован и задокументирован.

--> JSON-RPC (JSON Remote Procedure Call) — более современный аналог XML-RPC. Основное отличие — данные передаются в формате JSON.

--> REST (Representational State Transfer) — архитектурный стиль взаимодействия компьютерных систем в сети основанный на методах протокола HTTP.

--> Специализированные протоколы для конкретного вида задач, такие как GraphQL.

--> Менее распространенный, но более эффективный gRPC, передающий данные в бинарном виде и использующий HTTP/2 в качестве транспорта.

Остальные протоколы не так широко распространены.



---------------- SOAP ----------------

SOAP (Simple Object Access Protocol) — данные передаются в формате XML.
Преимущества:
- отраслевой стандарт по версии W3C;
- наличие строгой спецификации;
- широкая поддержка в продуктах Microsoft,
- однозначность.

Недостатки:
- сложность реализации;
- сложность/ресурсоемкость парсинга XML-данных.

Любое сообщение в протоколе SOAP — это XML документ, состоящий из следующих элементов (тегов):
--> Envelope. Корневой обязательный элемент. Определяет начало и окончание сообщения.
--> Header. Необязательный элемент — заголовок. Содержит элементы, необходимые для обработки самого сообщения. Например, идентификатор сессии.
--> Body. Основной элемент, содержит основную информацию сообщения. Обязательный.
--> Fault. Элемент, содержащий информацию об ошибках, возникающих в процессе обработки сообщения. Необязательный.



----- Пример SOAP-запроса на сервер интернет-магазина:

<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
     <getProductDetails xmlns="http://warehouse.example.com/ws">
       <productID>12345</productID>
     </getProductDetails>
   </soap:Body>
</soap:Envelope>

----- Пример ответа:

<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
   <soap:Body>
     <getProductDetailsResponse xmlns="http://warehouse.example.com/ws">
       <getProductDetailsResult>
         <productID>12345</productID>
         <productName>Стакан граненый</productName>
         <description>Стакан граненый. 250 мл.</description>
         <price>9.95</price>
         <currency>
             <code>840</code>
             <alpha3>USD</alpha3>
             <sign>$</sign>
             <name>US dollar</name>
             <accuracy>2</accuracy>
         </currency>
         <inStock>true</inStock>
       </getProductDetailsResult>
     </getProductDetailsResponse>
   </soap:Body>
</soap:Envelope>



---------------- REST ----------------
REST (Representational State Transfer) — на самом деле архитектурный стиль, а не протокол. 
В отличие от SOAP, REST не подкреплен официальным стандартом. Фактически, он основывается на соглашениях. 
Веб-сервис, построенный с учетом всех требований и ограничений архитектурного стиля, можно назвать RESTful веб-сервисом.
REST не использует конвертацию данных при передаче, данные передаются в исходном виде — это снижает нагрузку на клиент веб-сервиса, но увеличивает нагрузку на сеть. 
Управление данными происходит с помощью методов HTTP:
- GET — получить данные;
- POST — добавить данные;
- PUT — изменить данные;
- DELETE — удалить данные.

Использование этих методов позволяет реализовать типичный CRUD (Create/Read/Update/Delete) для любой информации. Но это лишь соглашение: часто используются только 2 метода: GET для получения и POST для всего остального. Разобраться поможет такое понятие, как REST-Patterns. Паттерны связывают HTTP методы с тем, что они делают.



---------------- RPC ----------------
У семейства протоколов RPC (Remote Procedure Call) свой отличительный подход — удаленный вызов процедур.
В отличие от REST, одна точка входа, и телом запроса определяется, какой ресурс или какое действие будет выполнено. Реализаций подхода не так много. 
Главным образом они различаются форматом передачи данных — XML, JSON или бинарный.

---> XML-RPC и SOAP
XML-RPC изначально был разработан Microsoft в конце 90-х годов. Это текстовый протокол, в изначальном виде довольно прост в освоении. 
Единственная проблема этого формата — это сам XML (eXtensible Markup Language). 
XML, как формат передачи данных, довольно избыточен. В первую очередь, из-за открывающих и закрывающих тегов. 
У HTML в каком-то смысле та же проблема, но ничего другого для верстки не существует.

Позже Microsoft разработали еще один протокол, который стал расширением XML-RPC — SOAP (Simple Object Access Protocol). 
У него более строгая структура, много ограничений и требований. Сам протокол может работать поверх множества сетевых протоколов – SMTP, FTP и т.д. 
Сейчас SOAP используется для общений между сервисами (в основном с 1С) и для отправки SMS. 
Некоторые сервисы вроде интернет-магазинов до сих пор используют его для внутренних нужд — для SOAP один раз описывается схема передачи данных, 
дальше большинство SOAP-клиентов сами могут сформировать запрос и ответ без дополнительных действий со стороны разработчика.


---> JSON-RPC
JSON-RPC — это протокол семейства RPC, у которого в качестве формата передачи данных используется JSON.
Несмотря на простоту и внешнее удобство, не получил популярности. В том числе из-за REST API с поддержкой JSON в качестве формата передачи данных. 
Но не так давно в React сообществе появился новый формат общения между разными частями приложения, построенного на фреймворке Next.js – tRPC. 
Является версией JSON-RPC с поддержкой типизации из TypeScript. 
Протокол относительно молодой, основное применение и развитие происходит пока только внутри React (Next.js) сообщества. 
Но внимания заслуживает. В остальном же JSON-RPC популярность не снискал и практически не используется.


---> gRPC
gRPC — это бинарный протокол, т.е. данные передаются в бинарном виде, а не в виде текста. 
Разработан в Google и изначально использовался только для унификации взаимодействий между сервисов внутри самой компании. 
В 2016 году был выпущен в публичный доступ. 

Для кодирования и декодирования сообщений используется собственный протокол сериализации Protobuf (Protocol Buffers).
Максимально похожий на структуры из языка Си. Из плюсов Protobuf выделяют компактность, скорость сериализации и десериализации (особенно в сравнении с XML-форматами). 
Для описания формата сообщений и обработчиков пишутся *.proto файлы. 
Потом эти файлы компилируются в язык, на котором пишется приложение — Java, Python, PHP, JavaScript, Go и многие другие. 
Стоит отметить, что в Go-среде получил наибольшее распространение.

Главным ограничением протокола является то, что он работает поверх HTTP/2. 
Это полностью (на данный момент) исключает его использование в браузерах. 
Поэтому gRPC — протокол исключительно для общения сервисов на стороне бэкенда. 
Протокол очень популярен. Поэтому, если вы не столкнетесь с ним в первый год работы, иметь о нем представление будет полезно.


