
---------- Что такое тестирование API? ----------

Тестирование API — это тип тестирования программного обеспечения, при котором анализируется интерфейс прикладной
программы (API), чтобы убедиться, что он соответствует ожидаемой функциональности, безопасности,
производительности и надежности. Тесты выполняются непосредственно в API и в рамках интеграционного тестирования.
При тестировании API фокусируются на анализе бизнес-логики, а также безопасности откликов приложений и данных.
Тест API обычно выполняется путем отправки запросов к одной или нескольким конечным точкам API и сравнения ответа с ожидаемыми результатами.

Что важно учитывать при тестировании API?

Процесс тестирования API начинается с четкого понимания того, как API будет работать. Прежде всего стратегия.
Стратегия тестирования — это высокоуровневое описание требований к тестированию, из которого впоследствии может
быть составлен подробный план тестирования с указанием отдельных тестовых сценариев и тестовых случаев. 
Главные вопросы на этом этапе:
- Какие конечные точки (endpoints) доступны для тестирования?
- Какие коды ответов ожидаются для успешных запросов?
- Какие коды ответов ожидаются при неудачных запросах?
- Какое сообщение об ошибке должно появиться в теле неудачного запроса?

Как только вы проясните эти вопросы, переходите к написанию тестовых сценариев. 
Тестовые сценарии определяют условия и переменные, по которым тестировщики поймут, правильно ли работает
конкретная система и правильно ли она реагирует. 
После определения тестовых случаев, можно переходить к их выполнению и сравнивать ожидаемые результаты с
фактическими. Необходимо учитывать:
- время ответа;
- качество данных;
- подтверждение авторизации;
- коды состояния HTTP;
- коды ошибок.


-------- Типы тестирования API ---------
Существует шесть видов тестирования API — в зависимости от того, что именно проверяет тестировщик:

1. Функциональное тестирование / Тестирование методов
Каждый метод API проверяют по отдельности — чтобы убедиться, что они работают правильно и возвращают ожидаемые результаты. 
Тестирование включает проверку входных данных, выполнение операций и проверку вывода.
Функциональное тестирование гарантирует, что API работает точно так, как предполагается. 
Этот тест анализирует функции в коде, чтобы гарантировать, что API работает в пределах ожидаемых параметров и
обрабатывает ошибки, когда результаты выходят за указанные параметры.

2. Тестирование взаимодействий
Проверка взаимодействия API с другими API, компонентами программы и сервисами. 
Показывает, что он успешно отправляет и получает данные, а также обрабатывает различные сценарии использования.

3. Тестирование авторизации и аутентификации
Проверка доступа к API: как работают механизмы авторизации, кто и к каким функциям и данным имеет доступ.

4. Тестирование обработки ошибок
Проверка поведения API в случае непредвиденных ситуаций и ошибок — например, передачи некорректных данных.
Позволяет убедиться, что API правильно обрабатывает исключения и передаёт в программу верные коды ошибок.

5. Тестирование производительности
Проверка работы API при повышенных нагрузках — его пропускной способности и производительности. 
Позволяет убедиться, что API не «отвалится» в случае повышенного спроса на программу.
Сюда же относится нагрузочное тестирование, которое проверяет, сколько вызовов может обработать API. 
Это помогает выявить проблемы производительности и доступности сервисов при масштабировании, а также проверит
производительность API в нормальных условиях.

6. Тестирование безопасности
Проверка уязвимостей безопасности API, которая помогает предотвратить утечку данных или несанкционированный доступ. 
Проверяются меры безопасности API и проводятся тесты на проникновение для установления возможных уязвимостей.
Тестирование безопасности проверяет методы шифрования, которые использует API, а также дизайн управления доступом.


---------- Принципы тестирования ----------
Чтобы создавать надёжные и эффективные тесты API, тестировщики придерживаются нескольких принципов:

- Использовать правильные и разнообразные входные данные
При тестировании важно использовать разные типы данных, граничные значения, некорректные данные. 
Это помогает убедиться, что API правильно обрабатывает все возможные входные сценарии.

- Автоматизировать тестирование
В тестировании API многое можно автоматизировать: например, проверку отдельных функций или обработку ошибок.

- Проводить непрерывные тесты
Если в компании есть процессы CI/CD, важно включить в них тестирование API. 
Это позволит регулярно проверять его работоспособность и получать обратную связь о проблемах сразу после их возникновения.

- Проверять безопасность
Поскольку API часто поставляются со стороны, важно тщательно тестировать их на уязвимости и проверять механизмы
аутентификации, чтобы и API, и основная система были защищены от потенциальных угроз и атак.


------------ Преимущества тестирования API ------------

Тестирование API гарантирует надежность, безопасность и масштабируемость соединений между платформами. Конкретные преимущества включают в себя:
-> Для автоматизации тестирования API требуется меньше кода, чем для автоматизированных тестов графического интерфейса. 
Это обеспечивает повышение скорости тестирования и меньшую общую стоимость разработки ПО.
-> Тестирование API позволяет разработчикам получать доступ к приложению без пользовательского интерфейса. 
Это позволяет тестировщику выявить ошибки на ранних этапах жизненного цикла разработки, а не ждать, пока они станут серьезными проблемами. Это также помогает экономить бюджет.
-> Тесты API не зависят от технологии и языка. Обмен данными осуществляется с использованием JSON или XML и содержит HTTP-запросы и ответы.
-> Тесты API используют экстремальные условия и входные данные при анализе приложений. 
Это устраняет уязвимости и защищает приложение от некачественного кода и поломок.
-> Тесты API можно интегрировать с тестами GUI. Например, интеграция может позволить создать новых пользователей
в приложении до выполнения теста графического интерфейса.


---------- Пример сценария тестирования API ----------
1) Опеределить требования к API и понимание, как именно оно работает и должно работать.
Изучить документацию API, чтобы понять, какие поля должны быть в задаче, как она должна быть создана и обновлена, ожидаемые коды состояния и структуру ответов.
2) Создать тестовые случаи, которые описывают разные сценарии использования API. 
Это может быть отправка правильных или неправильных данных, проверка граничных значений.
3) Настроить оркужение для тестирования API: установить необходимые инструменты или создать тестовые данные.
4) Отправить запросы. С использованием Postman отправить запросы из тестовых случаев к API.
5) Проверить ответы. 
Проверить ответы от API, используя ожидаемые результаты, указанные в тестовых случаях.
Например, убедиться, что возвращается правильный код состояния, структура ответа соответствует ожидаемой и значения полей задачи корректны.
6) Проверить, как API обрабатывает ошибки, отправляя некорректные запросы. 
Убедиться, что возвращаются соответствующие коды и описания ошибок.
7) Сгенерировать отчёты.
Создавать отчёт о результатах после каждого выполнения тестов. Включить в него информацию о прошедших 
и не прошедших тестах, кодах состояния, ответах, ошибках, и другие полезные данные.
8) Регулярно проводить повторное тестирование
Особенно после внесения изменений в код API или его окружения, для обнаружения проблем и подтверждения работоспособности API.

